#include<math.h>
#include "sound.h"
#include "protdata.h"
#include <allegro.h>

bool sound::is_ok = false;
DATAFILE *df;

class sample
{
friend class sound;
public:
  sample(){m_pSAMPLE = 0; m_destroy=false;}
  //sample(SAMPLE *ps){m_pSAMPLE = ps;}
  sample &operator = (SAMPLE *ps){cleanup();
                                  m_pSAMPLE = ps; m_destroy = false; return *this;}
  ~sample(){cleanup();}
  void create(int bits, int stereo, int freq, int len)
  {
    cleanup();
    m_pSAMPLE = create_sample(bits, stereo, freq, len);
    m_destroy = true;
  }
  unsigned char &operator[] (int idx){return static_cast<unsigned char *>(m_pSAMPLE->data)[idx];}
  void set_priority(int p){m_pSAMPLE->priority = p;}
private:
  void cleanup()
  {
    if (m_destroy && m_pSAMPLE) destroy_sample(m_pSAMPLE);
    m_pSAMPLE = 0;
    m_destroy = false;
  }
  SAMPLE *m_pSAMPLE;
  bool m_destroy;
};

sample bang_;
sample die_;
sample shoot_;
sample pickup_;
sample putdown_;
sample alert_;
sample pshoot_;
sample ouch_;
sample tadaa_;
sample collect_;
sample kaboom_;
sample bpop_;
sample clang_;

int sound::init()
{
int a;
double da,db;

is_ok=!install_sound(DIGI_AUTODETECT,MIDI_NONE,0);
if(!is_ok)return	1;
reserve_voices(16,0);
is_ok=!!(df=load_datafile("#"));
if(!is_ok)return	2;

//Sounds from datafile
bang_=static_cast<SAMPLE	*>(df[BANG].dat);
die_=static_cast<SAMPLE *>(df[OUCH].dat);
pshoot_=static_cast<SAMPLE *>(df[BOING].dat);
ouch_=static_cast<SAMPLE	*>(df[DAMAGE].dat);
kaboom_=static_cast<SAMPLE *>(df[KABOOM].dat);
bpop_=static_cast<SAMPLE	*>(df[TINNYPOP].dat);
clang_=static_cast<SAMPLE *>(df[CLANG].dat);

//Sounds generated by code.

//Shoot - exponentialy decaying white noise.
shoot_.create(8,0,22050,5000);
for(a=0;a<5000;a++)
  {
  da=static_cast<double>(a);
  shoot_[a]=static_cast<unsigned char>(128.0+0.5*exp(-da/2000.0)*(rand()%200-100));
  }

//Pickup - increasing frequency sine wave
pickup_.create(8,0,22050,5000);
for(a=0;a<5000;a++)
  {
  da=static_cast<double>(a);
  pickup_[a]=static_cast<unsigned char>(128.0+70*sin(da*(da+5000.0)/5000.0/30.0));
  }

//Putdown - decreasing frequency sinewave.  Pickup reversed.
putdown_.create(8,0,22050,5000);
for(a=0;a<5000;a++)
  {
  da=static_cast<double>(a);
  putdown_[a]=static_cast<int>(128.0+70*sin((5000.0-da)*(10000.0-da)/5000.0/30.0));
  }

//Alert -is supposed to sound like a klaxon but turned out like a drunk bubmlebee
alert_.create(8,0,22050,12600);
for(int a=0;a<180;a++)
  {
  alert_[a]=128+rand()%100-50;
  alert_[a+12420]=128+rand()%100-50;
  }
alert_[89]=64;
alert_[90]=192;
for(int b=0;b<70;b++)
  for(int a=0;a<180;a++)
    alert_[180*b+a]=static_cast<int>(0.5+
     1.0/70.0*((70-b)*alert_[a]+b*alert_[12420+a]) );


for(int a=0;a<2500;a++)
  {
  alert_[a]=128+static_cast<int>(0.5+
	    (1.0-cos(2.0*M_PI*a/5000))*(alert_[a]-128)  );
  alert_[a+2500]=128+static_cast<int>(0.5+
	    (3.0+cos(2.0*M_PI*a/5000))/2.0*(alert_[a+2500]-128)	);
  alert_[12599-a]=128+static_cast<int>(0.5+
	    (1.0-cos(2.0*M_PI*a/5000))/2.0*(alert_[12499-a]-128)	 );
  }

//Tadaa - 1-3-5 major chord, where each note is a sawtooth wave
tadaa_.create(8,0,22050,25000);
da=exp(log(2.0)*3.0/12.0)/1.6;
db=exp(log(2.0)*7.0/12.0)/1.6;
for(a=0;a<25000;a++)
  {
  tadaa_[a]=static_cast<char>(128);
  tadaa_[a]+=static_cast<int>(1.6*a)%64-32;
  tadaa_[a]+=static_cast<int>(1.0/da*a)%64-32;
  tadaa_[a]+=static_cast<int>(1.0/db*a)%64-32;
  if(a>4000&&a<4400)tadaa_[a]=128;
  }

//collect (a powerup) - increasing frequency sawtooth wave
collect_.create(8,0,22050,15000);
for(a=0;a<15000;a++)
  {
  collect_[a]=128-64+(a*(a+15000)/15000)%128;
  }

//Sound priority.  Attempt to prevent "important" sounds (alert, die) from getting
//drowned out by less important ones (shoot, bang).  Default is 128.
bang_.set_priority(0);
shoot_.set_priority(0);
ouch_.set_priority(64);
//everything else->priority = 128
bpop_.set_priority(160);
pshoot_.set_priority(192);
alert_.set_priority(255);
die_.set_priority(255);

return 0;
}

void sound::cleanup()
{
  if(is_ok)
  {
    /*destroy_sample(shoot);
    destroy_sample(pickup);
    destroy_sample(putdown);
    destroy_sample(alert);
    destroy_sample(tadaa);
    destroy_sample(collect);*/

    unload_datafile(df);
    is_ok=0;
  }
}

void sound::play(const foo &spl,int vol)
{
  sample *ps=0;
  switch(spl)
  {
    case bang:    ps = &bang_;    break;
    case die:     ps = &die_;     break;
    case shoot:   ps = &shoot_;   break;
    case pickup:  ps = &pickup_;  break;
    case putdown: ps = &putdown_; break;
    case alert:   ps = &alert_;   break;
    case pshoot:  ps = &pshoot_;  break;
    case ouch:    ps = &ouch_;    break;
    case tadaa:   ps = &tadaa_;   break;
    case collect: ps = &collect_; break;
    case kaboom:  ps = &kaboom_;  break;
    case bpop:    ps = &bpop_;    break;
    case clang:   ps = &clang_;   break;
  } 
  if(is_ok)play_sample(ps->m_pSAMPLE,vol,128,1000,0);
}

